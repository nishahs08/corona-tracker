{"version":3,"sources":["components/Information.tsx","components/Confirmed.tsx","components/CountryPicker.tsx","hooks.ts","components/Deaths.tsx","components/Recovered.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Information","numbers","lastUpdated","type","title","date","Date","formattedDate","getDate","getMonth","getFullYear","_color","Grid","item","xs","md","component","Card","direction","justifyContent","alignItems","alignContent","style","borderBottom","margin","Typography","variant","color","start","end","duration","separator","fontSize","Confirmed","confirmed","CountryPicker","props","countries","useState","data","setData","useEffect","a","axios","get","res","console","log","getData","useCountriesApi","FormControl","NativeSelect","defaultValue","onChange","e","target","value","length","map","c","i","name","Deaths","deaths","Recovered","recovered","App","country","setCountry","url","useReportApi","dailyData","resData","d","total","reportDate","useDailyData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","Container","container","spacing","textAlign","lastUpdate","toString","Box","width","Skeleton","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc0cc7d.chunk.js","sourcesContent":["import { Grid, Card, Typography } from '@material-ui/core';\nimport CountUp from 'react-countup';\n\ninterface InformationProps {\n\tnumbers: number | undefined;\n\tlastUpdated: string;\n\ttype: string\n}\nexport const Information: React.FC<InformationProps> = ({ numbers, lastUpdated, type }) => {\n\n\tconst title = type === 'confirmed' ? 'Confirmed' : type === 'deaths' ? 'Deaths' : 'Recovered';\n\tconst date = new Date(lastUpdated);\n\tconst formattedDate = date.getDate() + ' - ' + (date.getMonth() + 1) + ' - ' + date.getFullYear();\n\tconst _color = type === 'confirmed' ? '#03DAC5' : type === 'deaths' ? '#B00020' : '#6200ee';\n\treturn (\n\t\t<Grid\n\t\t\titem\n\t\t\txs={12}\n\t\t\tmd={3}\n\t\t\tcomponent={Card}\n\t\t\tdirection='column'\n\t\t\tjustifyContent='center'\n\t\t\talignItems='center'\n\t\t\talignContent='center'\n\t\t\tstyle={{ borderBottom: `10px solid ${_color}`, margin: '15px' }}\n\t\t>\n\n\t\t\t<Typography variant='h5' style={{ color: _color }}>{title}</Typography>\t\n\t\t\t\t<CountUp\n\t\t\t\t\tstart={0}\n\t\t\t\t\tend={numbers ? numbers : 0}\n\t\t\t\t\tduration={2.75}\n\t\t\t\t\tseparator=' '\n\t\t\t\t\tstyle={{ fontSize: '20px', color: 'green' }}\n\t\t\t\t/>\n\t\t\t<Typography variant='subtitle2'> {formattedDate}</Typography>\n\n\t\t</Grid>\n\t);\n};\n","\nimport { Information } from './Information';\ninterface ConfirmedProps {\n\tconfirmed: number | undefined;\n\tlastUpdated: string;\n}\nexport const Confirmed :React.FC<ConfirmedProps> = ({confirmed,lastUpdated}) => {\n\treturn (\n\t\t<Information type='confirmed' numbers={confirmed} lastUpdated={lastUpdated}/>\n\t);\n};\n","import { FormControl, NativeSelect } from '@material-ui/core';\nimport React from 'react';\nimport { useCountriesApi } from '../hooks';\ninterface CountryPickerProps {\n\tonChange: (value: string) => void;\n}\nexport const CountryPicker = (props: CountryPickerProps) => {\n\tconst countries = useCountriesApi();\n\n\treturn (\n\t\t<FormControl style={{margin:'15px'}}>\n\t\t\t<NativeSelect defaultValue='' onChange={(e: any) => props.onChange(e.target.value)}>\n\t\t\t\t<option value=''>Global</option>\n\t\t\t\t{countries.length\n\t\t\t\t\t? countries.map((c: any, i) => (\n\t\t\t\t\t\t\t<option key={i} value={c.name}>\n\t\t\t\t\t\t\t\t{c.name}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t  ))\n\t\t\t\t\t: null}\n\t\t\t</NativeSelect>\n\t\t</FormControl>\n\t);\n};\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\ntype ReportedData = {\n  confirmed: {\n    value: number;\n    detail: string;\n  };\n  recovered: {\n    value: number;\n    detail: string;\n  };\n  deaths: {\n    value: number;\n    detail: string;\n  };\n  lastUpdate:string\n};\nexport const useReportApi = (country:string|undefined) => {\n  const [data, setData] = useState<ReportedData>();\n  useEffect(() => {\n    const getData = async () => {\n      try {\n          const url = country ? `https://covid19.mathdro.id/api/countries/${country}`:'https://covid19.mathdro.id/api/';\n        const res = await axios.get(url);\n        setData(res.data);\n        console.log('country',country,res.data)\n      } catch {\n        console.log(\"something went wrong\");\n      }\n    };\n    getData();\n  }, [country]);\n  return data;\n};\n\n\n\nexport const useDailyData = () => {\n  const [data, setData] = useState<Object[]>();\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const res = await axios.get(\"https://covid19.mathdro.id/api/daily\");\n        //@ts-ignore\n        const resData = res.data.map((d) => ({\n          confirmed: d.confirmed.total,\n          deaths: d.deaths.total,\n          date: d.reportDate,\n        }));\n        setData(resData);\n        console.log(res.data);\n      } catch {\n        console.log(\"something went wrong\");\n      }\n    };\n    getData();\n  }, []);\n  return data;\n};\n\nexport const useCountriesApi = () =>{\n    const [data, setData] = useState([]);\n    useEffect(() => {\n      const getData = async () => {\n        try {\n          const res = await axios.get(\"https://covid19.mathdro.id/api/countries\");\n          setData(res.data.countries);\n          console.log(\"---\",res.data.countries)\n        } catch(err) {\n          console.log(\"something went wrong---\",err);\n        }\n      };\n      getData();\n    }, []);\n    return data;\n}","\nimport { Information } from './Information';\n\ninterface DeathsProps {\n\tdeaths: number | undefined;\n\tlastUpdated: string;\n}\nexport const Deaths: React.FC<DeathsProps> = ({ deaths, lastUpdated }) => {\n\treturn <Information type='deaths' numbers={deaths} lastUpdated={lastUpdated} />;\n};\n","\nimport {Information} from './Information'\ninterface RecoveredProps {\n\trecovered: number | undefined;\n\tlastUpdated: string;\n}\nexport const Recovered :React.FC<RecoveredProps>= ({recovered,lastUpdated}) => {\n\treturn (\n\t\t<Information type='recovered' numbers={recovered} lastUpdated={lastUpdated}/>\n\t);\n};\n\n","import { Container, Grid, Typography, Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport React, { useState } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport './App.css';\nimport { Confirmed } from './components/Confirmed';\nimport { CountryPicker } from './components/CountryPicker';\nimport { Deaths } from './components/Deaths';\nimport { Recovered } from './components/Recovered';\nimport { useReportApi, useDailyData } from './hooks';\n\nfunction App() {\n\tconst [country, setCountry] = useState('');\n\tconst data = useReportApi(country);\n\tconst dailyData = useDailyData();\n\n\tconst lineChart = dailyData?.length ? (\n\t\t<Line\n\t\t\tdata={{\n\t\t\t\t//@ts-ignore\n\t\t\t\tlabels: dailyData.map((data) => data.date),\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdata: dailyData.map((data) => data.confirmed),\n\t\t\t\t\t\tlabel: 'Infected',\n\t\t\t\t\t\tborderColor: '#3333ff',\n\t\t\t\t\t\tfill: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdata: dailyData.map((data) => data.deaths),\n\t\t\t\t\t\tlabel: 'Deaths',\n\t\t\t\t\t\tborderColor: '#3333ff',\n\t\t\t\t\t\tbackgroundColor: 'rgba(255,0,0,.5)',\n\t\t\t\t\t\tfill: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}}\n\t\t></Line>\n\t) : null;\n\n\tconst barChart = data?.confirmed ? (\n\t\t<Bar\n\t\t\tdata={{\n\t\t\t\tlabels: ['Infected', 'Recovred', 'Deaths'],\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'People',\n\t\t\t\t\t\tbackgroundColor: [\n\t\t\t\t\t\t\t'rgba(0,0,255,0.5)',\n\t\t\t\t\t\t\t'rgba(0,255,0,0.5)',\n\t\t\t\t\t\t\t'rgba(255,0,0,0.5)',\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdata: [data.confirmed.value, data.recovered.value, data.deaths.value],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}}\n\t\t></Bar>\n\t) : null;\n\tconst onChange = (value: string) => {\n\t\tsetCountry(value);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tdirection='column'\n\t\t\t\talignContent='center'\n\t\t\t\tspacing={8}\n\t\t\t\tstyle={{ textAlign: 'center' }}\n\t\t\t>\n\t\t\t\t<Grid item xs={12} md={12}>\n\t\t\t\t\t<Typography variant='h3' color='textPrimary' style={{margin:'25px'}}>\n\t\t\t\t\t\tCOVID TRACKER\n\t\t\t\t\t</Typography>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12} md={12}>\n\t\t\t\t\t<Grid container spacing={4} justifyContent='space-around'>\n\t\t\t\t\t\t<Confirmed\n\t\t\t\t\t\t\tconfirmed={data?.confirmed.value}\n\t\t\t\t\t\t\tlastUpdated={\n\t\t\t\t\t\t\t\tdata?.lastUpdate ? data?.lastUpdate : new Date().toString()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Deaths\n\t\t\t\t\t\t\tdeaths={data?.deaths.value}\n\t\t\t\t\t\t\tlastUpdated={\n\t\t\t\t\t\t\t\tdata?.lastUpdate ? data?.lastUpdate : new Date().toString()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Recovered\n\t\t\t\t\t\t\trecovered={data?.recovered.value}\n\t\t\t\t\t\t\tlastUpdated={\n\t\t\t\t\t\t\t\tdata?.lastUpdate ? data?.lastUpdate : new Date().toString()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid xs={12} md={12}>\n\t\t\t\t\t<CountryPicker onChange={onChange} />\n\t\t\t\t\t{data ? (\n\t\t\t\t\t\t<Box style={{ width: '800px', margin: '15px' }}>\n\t\t\t\t\t\t\t{country ? barChart : lineChart}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Skeleton variant='rect' style={{ width: '800px' }} height={400} />\n\t\t\t\t\t)}\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}